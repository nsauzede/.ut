#!/bin/bash

#
# UT - Simple and fast Unit Test framework
# Copyright (C) 2024 Nicolas Sauzede (nicolas.sauzede@gmail.com)
# SPDX-License-Identifier: GPL-3.0-or-later
#

utcalled=$_
if [ $utcalled == $0 ]; then

UTOPTHELP="--help"
UTOPTVERSION="--version"
UTOPTFAST="--fast"
UTOPTSLOW="--slow"
UTOPTNOPY="--nopy"
UTOPTNOGT="--nogt"
UTOPTFORCE="-f"
UTOPTCLEAN="-c"
UTOPTKEEP="-k"
UTOPTVERBOSE="-v"
UTOPTPATH="-C"

UTINIT="init"
UTHELP="help"
UTVERSION="version"
UTCLEAN="clean"
UTTEST="test"
UTRETEST="retest"
UTWATCH="watch"


UTBIN=$0
UTARG=$1

if [ "x${UTARG}" = "xcomplete" ]; then
    echo "$UTOPTHELP $UTOPTVERSION $UTOPTFAST $UTOPTSLOW $UTOPTNOPY $UTOPTNOGT $UTOPTFORCE $UTOPTCLEAN $UTOPTKEEP $UTOPTVERBOSE $UTOPTPATH $UTINIT $UTHELP $UTVERSION $UTCLEAN $UTTEST $UTRETEST $UTWATCH"
    exit 0
fi

UT=ut
UTBINPATH=$(realpath `readlink ${UTBIN} || echo ${UTBIN}`)
UTROOT=`dirname ${UTBINPATH}`
UT_VERSION=`grep "define UT_VERSION" ${UTROOT}/include/ut/ut.h|cut -d'"' -f2`


UTMAKEFILE=${UTROOT}/tools/Makefile

# Default Project path, pkg, ...
UT_PROJ=${PWD}
UT_PKG=`basename ${UT_PROJ}`

while true; do
    case ${UTARG} in
    ${UTOPTHELP}) :
        DO_HELP=1
        shift
        ;;
    ${UTOPTVERSION}) :
        DO_VERSION=1
        shift
        ;;
    ${UTOPTFAST}) :
        UT_FAST=1
        shift
        ;;
    ${UTOPTSLOW}) :
        UT_SLOW=1
        shift
        ;;
    ${UTOPTNOPY}) :
        UT_NOPY=1
        shift
        ;;
    ${UTOPTNOGT}) :
        UT_NOGT=1
        shift
        ;;
    ${UTOPTFORCE}) :
        UT_FORCE=1
        shift
        ;;
    ${UTOPTCLEAN}) :
        UT_OPTCLEAN=1
        shift
        ;;
    ${UTOPTKEEP}) :
        UT_KEEP=1
        shift
        ;;
    ${UTOPTVERBOSE}) :
        UT_VERBOSE=1
        shift
        ;;
    ${UTOPTPATH}) :
        shift
        UTARG=$1
        case ${UTARG} in
        "") :
            echo "error: a value is required for '${UTOPTPATH} <DIRECTORY>' but none was supplied."
            echo ""
            echo "For more information, use '${UTOPTHELP}' option."
            exit 1
            ;;
        *) :
            ;;
        esac
        UT_PROJ="${UTARG}"
        shift
        ;;
    *) :
        UTARG=$1
        break
        ;;
    esac
    UTARG=$1
done

if [ "x${V}" = "x1" -o "x${UT_VERBOSE}" = "x1" ]; then
SILENCEMAKE=--no-print-directory
else
SILENCEMAKE=-s
fi

UT_DIR="."
UTCMD=${UTARG}
case ${UTCMD} in
${UTINIT}) :
    DO_INIT=1
    shift
    ;;
${UTVERSION}) :
    DO_VERSION=1
    shift
    ;;
${UTHELP}) :
    DO_HELP=1
    shift
    ;;
${UTCLEAN}) :
    DO_CLEAN=1
    shift
    ;;
${UTTEST}) :
    DO_TEST=1
    shift
    ;;
${UTRETEST}) :
    DO_RETEST=1
    shift
    ;;
${UTWATCH}) :
    DO_WATCH=1
    shift
    ;;
"" | "--") :
    UTCMD=${UTWATCH}
    DO_WATCH=1
    ;;
*) :
    if [ -d "$1" ]; then
        UTCMD=${UTWATCH}
        DO_WATCH=1
    else
        echo "Unexpected argument '${UTARG}'."
        echo "Run '${UT} ${UTOPTHELP}' for usage."
        echo ""
        exit 1
    fi
    ;;
esac
UTARG=$1

if [ "x${UTARG}" != "x" ]; then
    if [ -d "$UTARG" ]; then
        UT_DIR="${UTARG}"
        shift
        UTARG=$1
    fi
    if [ "x${UTARG}" = "x--" ]; then
        shift
        UT_ARGS="$*"
    elif [ "x${UTARG}" != "x" ]; then
        echo "Unexpected argument '${UTARG}' for command '${UTCMD}'."
        echo "Run '${UT} ${UTOPTHELP}' for usage."
        echo ""
        exit 1
    fi
fi


if [ -n "${DO_HELP}" ]; then
    echo -e "UT Unit Test tool"
    echo -e ""
    echo -e "Usage: ${UT} [OPTIONS] [COMMAND] [directory] [--] [...]"
    echo -e ""
    echo -e "Options:"
    echo -e "      ${UTOPTHELP}\t\tPrint help"
    echo -e "      ${UTOPTVERSION}\t\tPrint version info and exit"
    echo -e "      ${UTOPTFAST}\t\tOnly run fast tests"
    echo -e "      ${UTOPTSLOW}\t\tOnly run slow tests"
    echo -e "      ${UTOPTNOPY}\t\tDisable pytest"
    echo -e "      ${UTOPTNOGT}\t\tDisable googletest"
    echo -e "      ${UTOPTFORCE}\t\tForce action"
    echo -e "      ${UTOPTCLEAN}\t\tClean first before running command"
    echo -e "      ${UTOPTKEEP}\t\tKeep intermediate executables"
    echo -e "      ${UTOPTVERBOSE}\t\tIncrease verbosity"
    echo -e "      ${UTOPTPATH} <DIRECTORY>\tSet project PATH to DIRECTORY instead of default PWD"
    echo -e ""
    echo -e "Commands:"
    echo -e "    ${UTINIT}\t\tInitialize ut project root"
    echo -e "    ${UTCLEAN}\t\tClean everything"
    echo -e "    ${UTTEST}\t\tRun refreshed tests"
    echo -e "    ${UTRETEST}\t\tRun all tests (as if they were refreshed)"
    echo -e "    ${UTWATCH}\t\tContinuously run the tests (TDD-style)"
    echo -e "    ${UTVERSION}\t\tPrint version info and exit"
    echo -e "    ${UTHELP}\t\tPrint help"
    echo -e ""
    echo -e "Optional trailing 'directory' specifies which project subdirectory to run tests from (default is project root)."
    echo -e "Optional trailing '--' allows for subsequent args to be passed as-is to underlying tools."
    echo -e ""
    echo -e "The default command (when omitted) is '${UTWATCH}'."
    echo -e "See '${UT} ${UTHELP} <command>' for more information on a specific command."
    exit 0
elif [ -n "${DO_VERSION}" ]; then
    echo "${UT} ${UT_VERSION}"
    exit 0
fi

DOTUT=".ut"
UT_UT="${UT_PROJ}/${DOTUT}"
UT_MK="ut.mk"

if [ -n "${DO_INIT}" ]; then
    if [ -d ${UT_UT} ]; then
        if [ "x${UT_FORCE}" != "x1" ]; then
            echo "Error: '${UT} ${UTINIT}' cannot be run on existing ut project."
            echo "Use '${UTOPTFORCE}' option to force."
            exit 1
        fi
    fi
    mkdir -p ${UT_UT}
    (cd ${UT_UT}; touch .keep; rm -Rf .cache .3p; ln -sf ../.cache; ln -sf ../.3p)
    echo "# ut project: \"${UT_PKG}\", from ut version ${UT_VERSION}" > ${UT_MK}
    echo "# WARNING: do not put any explicit Make targets in this file!" >> ${UT_MK}
    echo "" >> ${UT_MK}
    if [ -n "${UT_FAST}" ]; then
        echo "UT_FAST:=${UT_FAST}" >> ${UT_MK}
    else
        echo "UT_FAST:=0" >> ${UT_MK}
    fi
    if [ -n "${UT_SLOW}" ]; then
        echo "UT_SLOW:=${UT_SLOW}" >> ${UT_MK}
    else
        echo "UT_SLOW:=0" >> ${UT_MK}
    fi
    if [ -n "${UT_NOPY}" ]; then
        echo "UT_NOPY:=${UT_NOPY}" >> ${UT_MK}
    else
        echo "UT_NOPY:=0" >> ${UT_MK}
    fi
    if [ -n "${UT_NOGT}" ]; then
        echo "UT_NOGT:=${UT_NOGT}" >> ${UT_MK}
    else
        echo "UT_NOGT:=0" >> ${UT_MK}
    fi
    if [ -n "${UT_VERBOSE}" ]; then
        echo "UT_VERBOSE:=${UT_VERBOSE}" >> ${UT_MK}
    else
        echo "UT_VERBOSE:=0" >> ${UT_MK}
    fi
    echo "" >> ${UT_MK}
    echo "# Usual macros (CFLAGS, CXXFLAGS, LDFLAGS, LDLIBS, LD_LIBRARY_PATH, ..) can be defined, eg:" >> ${UT_MK}
    echo "#CXXFLAGS:=-I this/path -D THAT_SYMBOL ..." >> ${UT_MK}
    echo "# Or even UT internal ones, like VGO (valgrind options), eg:" >> ${UT_MK}
    echo "#VGO:=--suppressions=my_vg.supp --gen-suppressions=all" >> ${UT_MK}
    echo -e "\tCreated ut project"
    exit 0
fi

if [ ! -d "${UT_UT}" ]; then
    UT_PROJ0=${UT_PROJ}
    while true; do
        if [ -d "${UT_PROJ0}/${DOTUT}" ]; then
            break
        fi
        if [ "${UT_PROJ0}" = "/" ]; then
            echo "error: could not find '${DOTUT}' in '${UT_PROJ}' or any parent directory."
            echo "Run '${UT} ${UTINIT}' to initialize the root of an ut project."
            exit 1
        fi
        UT_PROJ0=`dirname ${UT_PROJ0}`
    done
    UT_PROJ=${UT_PROJ0}
fi
if [ "x${UT_DIR}" != "x" ]; then
UT_DIR=`realpath --relative-to="${UT_PROJ}" "${UT_DIR}"`
else
UT_DIR=.
fi

if [ -n "${UT_OPTCLEAN}" -o -n "${DO_CLEAN}" ]; then
    UT_ARGS="${UT_ARGS}" UT_UT="${UT_UT}" UT_DIR="${UT_DIR}" UT_PROJ="${UT_PROJ}" UT_VERSION="${UT_VERSION}" UT_VERBOSE="${UT_VERBOSE}" UT_FAST="${UT_FAST}" UT_SLOW="${UT_SLOW}" UT_NOPY="${UT_NOPY}" UT_NOGT="${UT_NOGT}" UT_KEEP="${UT_KEEP}" make ${SILENCEMAKE} -C "${UT_PROJ}" -f "${UTMAKEFILE}" mrproper
fi

if [ -n "${DO_CLEAN}" ]; then
    # already done
    exit 0
elif [ -n "${DO_TEST}" ]; then
    UT_ARGS="${UT_ARGS}" UT_UT="${UT_UT}" UT_DIR="${UT_DIR}" UT_PROJ="${UT_PROJ}" UT_VERSION="${UT_VERSION}" UT_VERBOSE="${UT_VERBOSE}" UT_FAST="${UT_FAST}" UT_SLOW="${UT_SLOW}" UT_NOPY="${UT_NOPY}" UT_NOGT="${UT_NOGT}" UT_KEEP="${UT_KEEP}" make ${SILENCEMAKE} -C "${UT_PROJ}" -f "${UTMAKEFILE}" all
elif [ -n "${DO_RETEST}" ]; then
    UT_ARGS="${UT_ARGS}" UT_UT="${UT_UT}" UT_DIR="${UT_DIR}" UT_PROJ="${UT_PROJ}" UT_VERSION="${UT_VERSION}" UT_VERBOSE="${UT_VERBOSE}" UT_FAST="${UT_FAST}" UT_SLOW="${UT_SLOW}" UT_NOPY="${UT_NOPY}" UT_NOGT="${UT_NOGT}" UT_KEEP="${UT_KEEP}" make ${SILENCEMAKE} -C "${UT_PROJ}" -f "${UTMAKEFILE}" mrproper
    UT_ARGS="${UT_ARGS}" UT_UT="${UT_UT}" UT_DIR="${UT_DIR}" UT_PROJ="${UT_PROJ}" UT_VERSION="${UT_VERSION}" UT_VERBOSE="${UT_VERBOSE}" UT_FAST="${UT_FAST}" UT_SLOW="${UT_SLOW}" UT_NOPY="${UT_NOPY}" UT_NOGT="${UT_NOGT}" UT_KEEP="${UT_KEEP}" make ${SILENCEMAKE} -C "${UT_PROJ}" -f "${UTMAKEFILE}" all
elif [ -n "${DO_WATCH}" ]; then
    UT_ARGS="${UT_ARGS}" UT_UT="${UT_UT}" UT_DIR="${UT_DIR}" UT_PROJ="${UT_PROJ}" UT_VERSION="${UT_VERSION}" UT_VERBOSE="${UT_VERBOSE}" UT_FAST="${UT_FAST}" UT_SLOW="${UT_SLOW}" UT_NOPY="${UT_NOPY}" UT_NOGT="${UT_NOGT}" UT_KEEP="${UT_KEEP}" make ${SILENCEMAKE} -C "${UT_PROJ}" -f "${UTMAKEFILE}" watch
else
    echo "Error: Nothing done ?!"
    exit 1
fi

# End of normal case.

else

utbin=${BASH_SOURCE}
utfull=$(realpath `readlink ${utbin} || echo ${utbin}`)
utroot=`dirname ${utfull}`
ut=ut
utbinpath=${utroot}

if [ -d "${utbinpath}" ] && [[ ":$PATH:" != *":${utbinpath}:"* ]]; then
    PATH="${PATH:+"$PATH:"}${utbinpath}"
fi

ut_complete()
{
    local cur opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    opts=$(ut complete)
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    return 0
}
complete -o nospace -F ut_complete ${ut}

unset utcalled utbin utfull utroot ut utbinpath

# End of autocomplete case.

fi
